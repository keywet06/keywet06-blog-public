<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LuoguP3195 | solution</title>
    <url>/post/solutionLuoguP3195/</url>
    <content><![CDATA[<h3 id="题目大意">题目大意</h3>
<p>P 教授要去看奥运，但是他舍不下他的玩具，于是他决定把所有的玩具运到北京。他使用自己的压缩器进行压缩，其可以将任意物品变成一堆，再放到一种特殊的一维容器中。</p>
<p>P 教授有编号为 <span class="math inline">\(1 \cdots n\)</span> 的 <span class="math inline">\(n\)</span> 件玩具，第 <span class="math inline">\(i\)</span> 件玩具经过压缩后的一维长度为 <span class="math inline">\(C_i\)</span>。</p>
<p>为了方便整理，P教授要求：</p>
<ul>
<li>在一个一维容器中的玩具编号是连续的。</li>
<li>同时如果一个一维容器中有多个玩具，那么两件玩具之间要加入一个单位长度的填充物。形式地说，如果将第 <span class="math inline">\(i\)</span> 件玩具到第 <span class="math inline">\(j\)</span> 个玩具放到一个容器中，那么容器的长度将为 <span class="math inline">\(x=j-i+\sum\limits_{k=i}^{j}C_k\)</span>。</li>
</ul>
<p>制作容器的费用与容器的长度有关，根据教授研究，如果容器长度为 <span class="math inline">\(x\)</span>，其制作费用为 <span class="math inline">\((x-L)^2\)</span>。其中 <span class="math inline">\(L\)</span> 是一个常量。P 教授不关心容器的数目，他可以制作出任意长度的容器，甚至超过 <span class="math inline">\(L\)</span>。但他希望所有容器的总费用最小。</p>
<h3 id="思路">思路</h3>
<h4 id="公式推导">公式推导</h4>
<p><span class="math display">\[
令 f_i 表示前 i 个物品制作容器的最小费用 ， sum_i = \sum_{k = 1}^{i} C_k\\
由题意得 f_i = min\{ f_j + (i - j - 1 + sum_i - sum_j - L)^2 \ |\ j \in [1, i - 1] \}\\
令 a_i = sum_i + i ，  L&#39; = L + 1\\
\therefore f_i = f_j + (a_i - a_j - L&#39;)^2\\
若决策j_2优于决策j_1(j_1 &lt; j_2)\\
\therefore f_{j_1} + (a_i - a_{j_1} - L&#39;)^2 \ge f_{j_2} + (a_i - a_{j_2} - L&#39;)^2\\
\therefore 2 a_i(a_{j_2} + L&#39;) - 2 a_i(a_{j_1} + L&#39;) \ge f_{j_2} + (a_{j_2} + L&#39;)^2 - f_{j_1} - (a_{j_1} + L&#39;)^2\\
令 b_i = f_{i} + (a_{i} + L&#39;)^2\\
\therefore 2 a_i(a_{j_2} - a_{j_1}) \ge b_{j_2} - b_{j_1}\\
\therefore 2 a_i \ge \frac{b_{j_2} - b_{j_1}}{a_{j_2} - a_{j_1}}\\
\]</span></p>
<h4 id="做法">做法</h4>
<p>首先将已经决策完毕的部分按 <span class="math inline">\((a_i, b_i)​\)</span> 画在平面直角坐标系上</p>
<p>在按 <span class="math inline">\(2a_i\)</span> 与斜率的大小决定在单调队列上决策点的取舍</p>
<p>相当于用单调队列维护下凸包</p>
<h3 id="代码">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">50000</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> Np = N + <span class="number">5</span>;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> n, L, Lp, head, tail;</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> a[Np], b[Np], c[Np], f[Np], s[Np];</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="function">_Tp <span class="title">sqr</span><span class="params">(_Tp x)</span></span>;</span><br><span class="line"><span class="keyword">template</span> &lt;<span class="keyword">typename</span> _Tp&gt;</span><br><span class="line">  <span class="function">_Tp <span class="title">sqr</span> <span class="params">(_Tp x)</span> </span>&#123; <span class="keyword">return</span> x * x; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span>.tie(<span class="number">0</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; L;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; c[i];</span><br><span class="line">        a[i] = a[i - <span class="number">1</span>] + c[i] + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    Lp = L + <span class="number">1</span>;</span><br><span class="line">    b[<span class="number">0</span>] = sqr(Lp);</span><br><span class="line">    head = <span class="number">1</span>;</span><br><span class="line">    tail = <span class="number">0</span>;</span><br><span class="line">    s[++tail] = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; ++i) &#123;</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="number">1.0</span> * ((b[s[head + <span class="number">1</span>]] - b[s[head]]) /</span><br><span class="line">          (a[s[head + <span class="number">1</span>]] - a[s[head]]) &lt;= <span class="number">2</span> * a[i] )) &#123;</span><br><span class="line">            ++head;</span><br><span class="line">        &#125;</span><br><span class="line">        f[i] = f[s[head]] + sqr(a[i] - a[s[head]] - Lp);</span><br><span class="line">        b[i] = f[i] + sqr(a[i] + Lp);</span><br><span class="line">        <span class="keyword">while</span> (head &lt; tail &amp;&amp; <span class="number">1.0</span> * (b[i] - b[s[tail]]) / (a[i] - a[s[tail]]) &lt;=</span><br><span class="line">          <span class="number">1.0</span> * (b[s[tail]] - b[s[tail - <span class="number">1</span>]]) / (a[s[tail]] - a[s[tail - <span class="number">1</span>]])) &#123;</span><br><span class="line">            --tail;</span><br><span class="line">        &#125;</span><br><span class="line">        s[++tail] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; f[n] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solution</category>
        <category>Luogu</category>
      </categories>
      <tags>
        <tag>solution</tag>
        <tag>Luogu</tag>
      </tags>
  </entry>
  <entry>
    <title>THUWC2020</title>
    <url>/post/THUWC2020/</url>
    <content><![CDATA[<h2 id="day--11">Day -11</h2>
<ul>
<li>发现自己 <del>只</del> 比一等分数线高 <span class="math inline">\(39\)</span> 分</li>
<li><del>浙江</del> 。。。</li>
<li>赶紧报名 <span class="math inline">\(THUWC\)</span></li>
</ul>
<h2 id="day--4">Day -4</h2>
<ul>
<li>自己居然过了 <span class="math inline">\(THUWC\)</span></li>
<li>机房一 <span class="math inline">\(341\)</span> 巨佬 <span class="math inline">\(PKUWC\)</span> 没过</li>
</ul>
<h2 id="day--1">Day -1</h2>
<ul>
<li>好紧张啊明天就要去首都了</li>
</ul>
<h2 id="day-0">Day 0</h2>
<ul>
<li>飞机上抢到了靠窗位置</li>
<li>紧张的一匹</li>
<li><del>北京的地铁太堵了</del></li>
<li>到宾馆发现先走的老师和同学们先去 <span class="math inline">\(PKU\)</span> 报道了</li>
<li><del>在宾馆等了半个小时才</del> 发现可以直接开房间</li>
</ul>
<h2 id="day-1">Day 1</h2>
<ul>
<li>一大早到了 <span class="math inline">\(THU\)</span></li>
<li>报到送 <code>精品围巾</code> ？？？</li>
<li>试机 <code>A+B</code> ？？？</li>
<li>几位巨佬教授开始讲清华有多菜 <del>（牛）</del></li>
<li>比如说 <code>THU 计算机系被评上世界第一我们也没办法</code> 。。。</li>
<li>下午考试只乱七八糟拿了 <span class="math inline">\(102pts\)</span></li>
<li><span class="math inline">\(20pts\)</span> 暴力没调出来。。。</li>
<li>看着同年级初二 <a href="//www.luogu.com.cn/user/35672" target="_blank" rel="noopener">skc巨佬</a> 拿了 <span class="math inline">\(120+\)</span> 慌的一批</li>
<li>完了初一 <a href="//www.luogu.com.cn/user/35347" target="_blank" rel="noopener">wzf巨佬</a> 都比我高</li>
<li>回宾馆只敢睡觉了</li>
</ul>
<h2 id="day-2">Day 2</h2>
<ul>
<li>清早就 <span class="math inline">\(Round\ 1\)</span></li>
<li>一开始打了 <span class="math inline">\(T1\ 30pts\)</span></li>
<li>后来一看感觉很水打了一个假 <span class="math inline">\(100\)</span></li>
<li>交上去 <span class="math inline">\(Wrong\ Answer\ 0\)</span></li>
<li>发现正解是假的</li>
<li>然后加了 <del>反正还是错的</del> 辣鸡贪心</li>
<li>竟然 <span class="math inline">\(70pts\)</span> <del>（还是只错了Subtask 1）</del></li>
<li>然后和暴力整合一下就 <span class="math inline">\(A\)</span> 了</li>
<li><span class="math inline">\(30\ min\ 30pts\)</span> 暴力没调出来。。。</li>
<li>只有 <span class="math inline">\(100pts\)</span> 了</li>
<li>不过貌似很多人考的都没有昨天好 <del>（我也是啊</del></li>
<li>中午吃过午饭与 <a href="#">skc巨佬</a> 和 <a href="//www.luogu.com.cn/user/35347" target="_blank" rel="noopener">wzf巨佬</a> 在清华园散步 <del>（闲逛）</del></li>
<li>然后吃了鸡腿匆忙赶向考场</li>
<li><span class="math inline">\(Round\ 2\)</span> 果然是传说中的工程题</li>
<li><span class="math inline">\(CPU,\ Cache,\ Memory\)</span> ？？？</li>
<li>说明文档开考 <span class="math inline">\(5min\)</span> 才发下来</li>
<li><span class="math inline">\(A\)</span> 掉 <span class="math inline">\(T1,\ T2\)</span> 然后发现 <span class="math inline">\(T3\)</span> <span class="math inline">\(CE\)</span></li>
<li>开始慌，然后到最后到调不出来</li>
<li>只有 <span class="math inline">\(96pts\)</span> 了</li>
<li><span class="math inline">\(3\)</span> 场考试只有 <span class="math inline">\(102 + 100 + 96 = 298pts\)</span></li>
<li><span class="math inline">\(300pts\)</span> 都没到。。。</li>
<li>看来今年凉了</li>
</ul>
<h2 id="day-3">Day 3</h2>
<ul>
<li>不出意料没接到电话</li>
<li>然后去天安门闲逛</li>
<li>博物馆周一闭馆</li>
<li>天安门、人民大会堂据说有中日韩三国领导人会议</li>
<li>然后只能去天坛</li>
<li>匆匆忙忙听了半个讲座就去机场了</li>
</ul>
<h2 id="后记">后记</h2>
<ul>
<li>感觉自己还是码力不足</li>
<li>一堆 <span class="math inline">\(bug\)</span></li>
<li>要是没有的话就多了 <span class="math inline">\(20 + 30 + 70 = 120pts\)</span> 。。。</li>
<li>感觉自闭了</li>
<li>明年加油吧</li>
</ul>
]]></content>
      <categories>
        <category>游记</category>
      </categories>
      <tags>
        <tag>游记</tag>
        <tag>THUWC</tag>
      </tags>
  </entry>
  <entry>
    <title>ARC101C | solution</title>
    <url>/post/sollutionARC101C/</url>
    <content><![CDATA[<h3 id="题目大意">题目大意</h3>
<ul>
<li>选择 <span class="math inline">\(\frac{n}{2}\)</span> 对点，要求每条边必被至少一个点对的树上路径经过</li>
</ul>
<h3 id="思路">思路</h3>
<h4 id="转化模型">转化模型</h4>
<ul>
<li><p>根据容斥原理，答案为：<strong>强制选择若干条不被路径经过</strong>的方案乘容斥系数求和。</p></li>
<li><p>将这些边删去，将整棵树分为若干连通块，方案即为每个连通块任意匹配的方案数乘积。</p></li>
<li><p>而 <span class="math inline">\(2N\)</span> 个点自由匹配的方案数为 <span class="math inline">\(f(2N) = (2N - 1)!!\)</span>。</p></li>
<li><p>设 <span class="math inline">\(dp_{x, s}\)</span> 为 <span class="math inline">\(x\)</span> 子树中，<span class="math inline">\(x\)</span> 所在连通块大小为 <span class="math inline">\(s\)</span> 时的所有方案的权值和。</p></li>
</ul>
<h4 id="dp-转移"><span class="math inline">\(dp\)</span> 转移</h4>
<ul>
<li><p>初始 <span class="math inline">\(dp_{x, 1} = 1\)</span> ，对 <span class="math inline">\(x\)</span> 所有儿子 <span class="math inline">\(c\)</span> ， <span class="math inline">\(dp_{x, i + j}&#39; \leftarrow dp_{x, i} \times dp_{c, j}\)</span> （即做一次多项式乘法）；</p></li>
<li><p>将 x 与父亲的边切断， <span class="math inline">\(dp_{x, 0} \leftarrow -(2i - 1)!! \times dp_{x, 2i}\)</span> 。</p></li>
</ul>
<p>答案即为 <span class="math inline">\(-dp_{root, 0}\)</span>。</p>
<h3 id="代码">代码</h3>
<figure class="highlight cpp"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> N = <span class="number">5005</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">long</span> <span class="keyword">long</span> mod = <span class="number">1000000007</span>;</span><br><span class="line"><span class="keyword">int</span> n, x, y;</span><br><span class="line"><span class="keyword">int</span> size[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> tmp[N], df[N];</span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> f[N][N];</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; to[N];</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u, <span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">    f[u][<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    size[u] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">auto</span> v: to[u]) &#123;</span><br><span class="line">        <span class="keyword">if</span> (v == fa) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(v, u);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size[u]; ++i) tmp[i] = f[u][i], f[u][i] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size[u]; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt;= size[v]; ++j) &#123;</span><br><span class="line">                f[u][i + j] += tmp[i] * f[v][j] % mod;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        size[u] += size[v];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;= size[u]; ++i) ((f[u][i] %= mod) += mod) %= mod;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= size[u]; i += <span class="number">2</span>) f[u][<span class="number">0</span>] += -df[i - <span class="number">1</span>] * f[u][i] % mod;</span><br><span class="line">    ((f[u][<span class="number">0</span>] %= mod) += mod) %= mod;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; ++i) &#123;</span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cin</span> &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        to[x].push_back(y);</span><br><span class="line">        to[y].push_back(x);</span><br><span class="line">    &#125;</span><br><span class="line">    df[<span class="number">0</span>] = df[<span class="number">1</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= n; ++i) df[i] = df[i - <span class="number">2</span>] * i % mod;</span><br><span class="line">    dfs(<span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; mod - f[<span class="number">1</span>][<span class="number">0</span>] &lt;&lt; <span class="built_in">std</span>::<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>solution</category>
        <category>AtCoder</category>
        <category>ARC</category>
      </categories>
      <tags>
        <tag>solution</tag>
        <tag>AtCoder</tag>
        <tag>ARC</tag>
      </tags>
  </entry>
</search>
